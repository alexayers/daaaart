name: PR Check

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main    

jobs:
  pr-check:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Identify changed packages
        id: changed-packages
        run: |
          echo "Changed packages:"
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep 'packages/')
          echo $changed_files
          packages=$(echo "$changed_files" | cut -d'/' -f2 | sort -u)
          echo "::set-output name=packages::[$(echo $packages | sed 's/ /, /g')]"

      - name: Set matrix for package testing
        id: set-matrix
        run: |
          matrix="{\"include\": ["
          for package in ${{ steps.changed-packages.outputs.packages }}
          do
            matrix+="{\"package\": \"$package\", \"has_tests\": true},"
          done
          matrix+="]}"
          echo "::set-output name=matrix::$matrix"

  test:
    needs: pr-check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.pr-check.outputs.matrix)}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.19.6"
          cache: true

      - name: Get dependencies
        run: dart pub get
        working-directory: "packages/${{ matrix.package }}"

      - name: Format code
        run: dart format --set-exit-if-changed ./
        working-directory: "packages/${{ matrix.package }}"

      - name: Analyze code
        run: dart analyze
        working-directory: "packages/${{ matrix.package }}"

      - name: Run tests and calculate coverage
        if: ${{ matrix.has_tests }}
        run: |
          dart test --coverage=coverage
          echo "has_coverage=true" >> $GITHUB_ENV
        working-directory: "packages/${{ matrix.package }}"

      - name: Set coverage false
        if: ${{ !matrix.has_tests }}
        run: echo "has_coverage=false" >> $GITHUB_ENV
        working-directory: "packages/${{ matrix.package }}"

      - name: Install coverage tools
        if: env.has_coverage == 'true'
        run: dart pub global activate coverage

      - name: Format coverage
        if: env.has_coverage == 'true'
        run: $HOME/.pub-cache/bin/format_coverage --lcov --in=coverage --out=coverage.lcov
        working-directory: "packages/${{ matrix.package }}"

      - name: Upload coverage reports to Codecov
        if: env.has_coverage == 'true'
        uses: codecov/codecov-action@v4.3.1
        with:
          files: coverage.lcov
          token: ${{ secrets.CODECOV_TOKEN }}